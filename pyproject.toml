[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "TotalSegmentator"
version = "2.9.0"
description = "Robust segmentation of 104 classes in CT images."
readme = "README.md"
requires-python = ">=3.9"
license = {text = "Apache 2.0"}
authors = [
    {name = "Jakob Wasserthal", email = "jakob.wasserthal@usb.ch"}
]
classifiers = [
    "Intended Audience :: Science/Research",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering",
    "Operating System :: Unix",
    "Operating System :: MacOS"
]
dependencies = [
    "torch>=2.1.2", # torch < 2.6.0 required if using nnunetv2 < 2.6.0
    "numpy<2",
    "SimpleITK",
    "nibabel>=2.3.0",
    "tqdm>=4.45.0",
    "xvfbwrapper",
    "nnunetv2>=2.2.1",
    'requests==2.27.1;python_version<"3.10"',
    'requests;python_version>="3.10"',
    "dicom2nifti",
    "pyarrow",
    "pytest>=8.4.1",
    "psutil>=7.0.0",
    "p-tqdm>=1.4.2",
    "surface-distance>=0.1",
]

[project.optional-dependencies]

[project.urls]
Homepage = "https://github.com/wasserth/TotalSegmentator"

[project.scripts]
TotalSegmentator = "totalsegmentator.bin.TotalSegmentator:main"
totalseg_combine_masks = "totalsegmentator.bin.totalseg_combine_masks:main"
crop_to_body = "totalsegmentator.bin.crop_to_body:main"
totalseg_import_weights = "totalsegmentator.bin.totalseg_import_weights:main"
totalseg_download_weights = "totalsegmentator.bin.totalseg_download_weights:main"
totalseg_setup_manually = "totalsegmentator.bin.totalseg_setup_manually:main"
totalseg_set_license = "totalsegmentator.bin.totalseg_set_license:main"
totalseg_get_phase = "totalsegmentator.bin.totalseg_get_phase:main"
totalseg_get_modality = "totalsegmentator.bin.totalseg_get_modality:main"
totalseg_evans_index = "totalsegmentator.bin.totalseg_evans_index:main"

[tool.setuptools]
package-dir = { "" = "." }

[tool.setuptools.packages.find]
where = ["."]
include = ["totalsegmentator*"]

[tool.setuptools.package-data]
totalsegmentator = [
    "resources/totalsegmentator_snomed_mapping.csv",
    "resources/contrast_phase_classifiers_2024_07_19.pkl",
    "resources/modality_classifiers_2025_02_24.json.0",
    "resources/modality_classifiers_2025_02_24.json.1",
    "resources/modality_classifiers_2025_02_24.json.2",
    "resources/modality_classifiers_2025_02_24.json.3",
    "resources/modality_classifiers_2025_02_24.json.4",
    "resources/modality_classifiers_normalized_2025_02_24.json.0",
    "resources/modality_classifiers_normalized_2025_02_24.json.1",
    "resources/modality_classifiers_normalized_2025_02_24.json.2",
    "resources/modality_classifiers_normalized_2025_02_24.json.3",
    "resources/modality_classifiers_normalized_2025_02_24.json.4",
    "resources/ct_brain_atlas_1mm.nii.gz"
]


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

line-length = 550
indent-width = 4
target-version = "py39"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E4", # Pycodestyle: Import
    "E7", # Pycodestyle: Statement
    "E9", # Pycodestyle: Runtime
    "F" # Pyflakes: All codes
]
ignore = [
    "E402", # module level import not at top of file
    "E701", # multiple statements on one line (colon)
    "E721", # do not compare types, use isinstance()
    "E741", # do not use variables named l, O, or I
    "F401", # module imported but unused
    "F821", # undefined name
    "F841" # local variable name is assigned to but never used
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[dependency-groups]
dev = []
